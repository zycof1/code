#include <iostream>
#include <stack>
using namespace std;

// Function to return precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

void infixToPostfix(string infix) {
    stack<char> operators;  // Stack to hold operators
    string postfix = "";  // Resulting postfix expression

    for (char c : infix) {
        if (isalnum(c)) {  // If it's an operand, add to the postfix
            postfix += c;
        }
        else if (c == '(') {  // If it's '(', push to the stack
            operators.push(c);
        }
        else if (c == ')') {  // If it's ')', pop until '(' is found
            while (!operators.empty() && operators.top() != '(') {
                postfix += operators.top();
                operators.pop();
            }
            operators.pop();  // Pop '('
        }
        else {  // If it's an operator
            while (!operators.empty() && precedence(operators.top()) >= precedence(c)) {
                postfix += operators.top();
                operators.pop();
            }
            operators.push(c);  // Push the current operator
        }
    }

    // Pop all remaining operators from the stack
    while (!operators.empty()) {
        postfix += operators.top();
        operators.pop();
    }

    cout << "Postfix Expression: " << postfix << endl;
}

int main() {
    string infix = "a-b*c-d/e+f";  // Example infix expression
    infixToPostfix(infix);  // Convert infix to postfix
    return 0;
}
