#include<bits/stdc++.h>
using namespace std;

class TreeNode {
    public:
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) {
        data = value;
        left = right = nullptr;
    }
};
class BST{
   public:
   TreeNode* root;
   TreeNode* InsertIntoBST(TreeNode* root,int val){
    if(root==NULL){return new TreeNode(val);}
    TreeNode* cur=root;
    while(true){
        if(val>=cur->data){
            if(cur->right!=NULL){cur=cur->right;}
            else{
                cur->right=new TreeNode(val);
                break;
            }                                           //inserting node
        }
        else{
            if(cur->left!=NULL){cur=cur->left;}
            else{
                cur->left=new TreeNode(val);
                break;
            }
        }
    }
    return root;
   }




  

TreeNode* Delete(TreeNode* root, int key) {
    if (root == nullptr) return root;

    // Traverse the tree to find the node to delete
    if (key < root->data) {
        root->left = Delete(root->left, key); // Go left
    }
    else if (key > root->data) {
        root->right = Delete(root->right, key); // Go right
    }
    else {
        // Node to be deleted is found
        if (root->left == nullptr) {
            // If no left child, replace with right child
            TreeNode* temp = root->right;
            delete root;
            return temp;
        }
        else if (root->right == nullptr) {
            // If no right child, replace with left child
            TreeNode* temp = root->left;
            delete root;
            return temp;
        }
        else {
            // Node with two children: Get the inorder successor (smallest in the right subtree)
            TreeNode* temp = minValueNode(root->right);
            // Copy the inorder successor's content to this node
            root->data = temp->data;
            // Delete the inorder successor
            root->right = Delete(root->right, temp->data);
        }
    }
    return root;
}

TreeNode* minValueNode(TreeNode* node) {
    TreeNode* current = node;
    while (current && current->left != nullptr) {
        current = current->left;
    }
    return current;
}

// Function to perform an inorder traversal of the tree
void inorder(TreeNode* root) {
    if (root != nullptr) {
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}

   

   TreeNode* search(TreeNode*root,int val){
    while(root!=NULL && root->data!=val){
        root=val<root->data?root->left:root->right;            //searching

    }
    return root;
   }


};

int main(){


     BST bst;
     TreeNode* root=new TreeNode(9);
    bst.InsertIntoBST(root,8);
    bst.InsertIntoBST(root,12);
    bst.InsertIntoBST(root,5);
    bst.InsertIntoBST(root,7);
    bst.InsertIntoBST(root,6);
    bst.InsertIntoBST(root,8);
    bst.InsertIntoBST(root,3);
    bst.InsertIntoBST(root,2);
    bst.InsertIntoBST(root,4);
    bst.InsertIntoBST(root,1);
    bst.InsertIntoBST(root,10);
    bst.InsertIntoBST(root,11);


    // Search for a value
    int searchValue = 3;
    if (bst.search( root,searchValue)) {
        cout << searchValue << " is found in the tree!" << endl;
    } else {
        cout << searchValue << " is not found in the tree!" << endl;
    }
   bst.Delete(root,3);
    
    if (bst.search( root,searchValue)) {
        cout << searchValue << " is found in the tree!" << endl;
    } else {
        cout << searchValue << " is not found in the tree!" << endl;
    }

    return 0;
}












