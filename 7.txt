#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

class RoadNetwork {
public:
    int n;  // Number of cities
    vector<vector<pair<int, int>>> adj;  // Adjacency list: {city, cost}

    RoadNetwork(int n) : n(n) {
        adj.resize(n);
    }

    void addRoad(int u, int v, int cost) {
        adj[u].push_back({v, cost});
        adj[v].push_back({u, cost});  // Undirected graph
    }

    void findMST() {
        vector<int> minCost(n, INT_MAX);  // Stores the minimum cost to connect to MST
        vector<bool> inMST(n, false);  // Tracks cities in MST
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;  // Min-heap (cost, city)

        minCost[0] = 0;
        pq.push({0, 0});  // Start from city 0

        int totalCost = 0;

        while (!pq.empty()) {
            int u = pq.top().second;
            int cost = pq.top().first;
            pq.pop();

            if (inMST[u]) continue;  // Skip if already in MST
            inMST[u] = true;
            totalCost += cost;

            for (auto &neighbor : adj[u]) {
                int v = neighbor.first;
                int roadCost = neighbor.second;

                if (!inMST[v] && roadCost < minCost[v]) {
                    minCost[v] = roadCost;
                    pq.push({roadCost, v});
                }
            }
        }

        cout << "Total road construction cost: " << totalCost << endl;
    }
};

int main() {
    RoadNetwork rn(5);  // 5 cities

    rn.addRoad(0, 1, 2);
    rn.addRoad(0, 3, 6);
    rn.addRoad(1, 2, 3);
    rn.addRoad(1, 3, 8);
    rn.addRoad(2, 3, 5);
    rn.addRoad(2, 4, 7);
    rn.addRoad(3, 4, 9);

    rn.findMST();  // Find and print MST total cost

    return 0;
}
